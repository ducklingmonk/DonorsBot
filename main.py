import os
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from data import MENU_TREE, ANSWERS

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler()  # Log to the console
    ]
)
logger = logging.getLogger(__name__)

# Load manager group chat ID from environment variable
MANAGER_GROUP_CHAT_ID = int(os.getenv("MANAGER_GROUP_CHAT_ID", 0))  # Replace with your manager group ID
RENDER_URL = os.getenv("RENDER_URL")

# Styled "Back" button
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
CUSTOM_QUESTION_BUTTON = "–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì"
# Track user navigation state {user_id: ["Main Menu", "Kell+", ...]}
user_navigation = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command - show main menu"""
    user_id = update.effective_user.id
    user_navigation[user_id] = ["Main Menu"]  # Reset navigation state

    keyboard = [
                   [category] for category in MENU_TREE.keys()
               ] + [[CUSTOM_QUESTION_BUTTON]]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "ü©∏ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )

async def show_current_menu(update: Update, path):
    node = get_node_from_path(path)

    if node is None:
        path = ["Main Menu"]
        node = MENU_TREE

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏, –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "_"
    if isinstance(node, dict):
        visible_keys = [k for k in node.keys() if not k.startswith("_")]
        keyboard = [[item] for item in visible_keys]
    else:
        keyboard = []

    # –ù–∞–∑–∞–¥ / –°–≤–æ–π –≤–æ–ø—Ä–æ—Å
    if len(path) > 1:
        keyboard.append([BACK_BUTTON])
    elif len(path) == 1:
        keyboard.append([CUSTOM_QUESTION_BUTTON])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç
    await update.message.reply_text(
        text="\u200b",  # <- no caption
        reply_markup=reply_markup
    )

def get_node_from_path(path):
    """Safe path navigation that preserves your restart logic"""
    if not path or path[-1] == "Main Menu":
        return MENU_TREE

    node = MENU_TREE
    for step in path[1:]:  # Skip "Main Menu"
        if isinstance(node, dict) and step in node:
            node = node[step]
        else:
            return None
    return node


def get_answer_from_path(full_path: list) -> str:
    """Exact path matching for duplicate menu items"""
    node = MENU_TREE
    for step in full_path[1:]:  # Skip "Main Menu"
        if isinstance(node, dict) and step in node:
            node = node[step]
        else:
            return None
    return ANSWERS.get(node) if isinstance(node, str) else None

async def send_answer(update, context, answer):
    if answer is None:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."); return

    if isinstance(answer, dict):
        if "photo_url" in answer:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=answer["photo_url"],
                caption=answer.get("text", "")
            )
        else:
            await update.message.reply_text(answer.get("text", ""), parse_mode='HTML')
    else:
        await update.message.reply_text(answer, parse_mode='HTML')


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text

    # ‚îÄ‚îÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫, ¬´–ù–∞–∑–∞–¥¬ª, ¬´–°–≤–æ–π –≤–æ–ø—Ä–æ—Å¬ª
    if user_id not in user_navigation:
        await start(update, context); return
    path = user_navigation[user_id]

    if msg == BACK_BUTTON:
        if len(path) > 1: path.pop()
        return await show_current_menu(update, path)

    if msg == CUSTOM_QUESTION_BUTTON:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        return

    # ‚îÄ‚îÄ –î–æ—Å—Ç–∞–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø—É–Ω–∫—Ç
    node = get_node_from_path(path)
    if isinstance(node, dict) and msg in node:
        next_node = node[msg]

        # ‚ë†  –ï—Å–ª–∏ next_node ‚Äî dict c _answer  ‚Üí  –ø—Ä–∏—Å—ã–ª–∞–µ–º, –∞ –∑–∞—Ç–µ–º –≤—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é
        if isinstance(next_node, dict) and "_answer" in next_node:
            answer_key = next_node["_answer"]
            await send_answer(update, context, ANSWERS.get(answer_key))
            path.append(msg)                    # –ø–µ—Ä–µ–π—Ç–∏ –≤–Ω—É—Ç—Ä—å
            return await show_current_menu(update, path)

        # ‚ë°  –ï—Å–ª–∏ next_node ‚Äî –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞‚Äë–∫–ª—é—á
        if isinstance(next_node, str):
            await send_answer(update, context, ANSWERS.get(next_node))
            return await show_current_menu(update, path)

        # ‚ë¢  –û–±—ã—á–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é‚Äë—Å–ª–æ–≤–∞—Ä—å –±–µ–∑ _answer
        if isinstance(next_node, dict):
            path.append(msg)
            return await show_current_menu(update, path)

    # ‚îÄ‚îÄ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if msg in MENU_TREE:
        user_navigation[user_id] = ["Main Menu", msg]
        return await show_current_menu(update, user_navigation[user_id])

    # ‚îÄ‚îÄ –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî —à–ª—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    if len(path) > 1:
        return await show_current_menu(update, path)
    await forward_to_manager(update, context)


async def forward_to_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Forward user's question to manager group"""
    if not MANAGER_GROUP_CHAT_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        user = update.effective_user
        message = (
            f"–í–æ–ø—Ä–æ—Å –æ—Ç @{user.username}:\n"
            f"{update.message.text}\n"
        )

        await context.bot.send_message(
            chat_id=MANAGER_GROUP_CHAT_ID,
            text=message
        )
        await update.message.reply_text(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
    except Exception as e:
        logger.error(f"Error forwarding message: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    await app.initialize()
    await app.start()

    try:
        PORT = int(os.environ.get("PORT", 10000))
        await app.updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{RENDER_URL}{TOKEN}"
        )

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ asyncio
        await asyncio.get_event_loop().create_future()
    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    finally:
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
