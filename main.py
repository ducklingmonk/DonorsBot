import os
import logging
import asyncpg
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from urllib.parse import urlparse
import asyncio
from data import QUESTIONS, REPLIES

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler()  # Log to the console
    ]
)
logger = logging.getLogger(__name__)

# Load manager group chat ID from environment variable
MANAGER_GROUP_CHAT_ID = int(os.getenv("MANAGER_GROUP_CHAT_ID", 0))  # Replace with your manager group ID
TEMBO_DB_URL = os.getenv("TEMBO_DATABASE_URL")
RENDER_URL = os.getenv("RENDER_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        parsed = urlparse(TEMBO_DB_URL)
        conn = await asyncpg.connect(
            user=parsed.username,
            password=parsed.password,
            database=parsed.path.lstrip('/'),
            host=parsed.hostname,
            port=parsed.port,
            ssl="require"
        )
        logger.info("Successfully connected to Tembo PostgreSQL")
    except Exception as e:
        logger.error(f"Connection error: {str(e)}")
        raise

    await conn.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            user_chat_id BIGINT NOT NULL,
            user_message_id INT NOT NULL,
            group_message_id INT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT NOW()
        )
    ''')
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã messages: OK")

    return conn

async def reconnect_db():
    db_conn = None
    retries = 3
    for attempt in range(1, retries + 1):
        try:
            parsed = urlparse(TEMBO_DB_URL)
            db_conn = await asyncpg.connect(
                user=parsed.username,
                password=parsed.password,
                database=parsed.path.lstrip('/'),
                host=parsed.hostname,
                port=parsed.port,
                ssl="require"
            )
            logger.info(f"Successfully reconnected to Tembo PostgreSQL (attempt {attempt}/{retries}).")
            return db_conn
        except Exception as e:
            logger.error(f"Database connection failed (attempt {attempt}/{retries}): {e}")
            await asyncio.sleep(2**attempt) # Exponential backoff
    logger.error("Failed to reconnect to the database after multiple attempts.")
    return None

# Styled "Back" button
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# Dictionary to store the relationship between user and forwarded messages
user_manager_messages = {}


# Command /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.from_user.username} started the bot.")
    # Create keyboard layout
    keyboard = [
                   [question] for question in QUESTIONS  # Each question is in its own row
               ] + [
                   ["–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì"]  # Additional button in its own row
               ]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ü©∏\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=reply_markup
    )


# Handle user messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_chat_id = update.message.chat_id
    user_message_id = update.message.message_id
    user_username = update.message.from_user.username

    logger.info(
        f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
    )
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if update.message.chat.id == MANAGER_GROUP_CHAT_ID:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    if user_message == "–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì":
        # Handle "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É" button
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º")
        logger.info(
            f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì'.")
    elif user_message in REPLIES:
        await context.bot.send_message(
            chat_id=user_chat_id,
            text=REPLIES[user_message],
            parse_mode="HTML"
        )
        logger.info(
            f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {user_message}. –û—Ç–≤–µ—Ç: {REPLIES[user_message]}")
    else:
        try:
            db = context.bot_data['db']
            if db is None or db.is_closed():
                db = await reconnect_db()
                context.bot_data['db'] = db
                logger.info("Reconnection?")
                if db is None:
                    raise Exception("Failed to connect to database")
            logger.info("Connection success!")
            if MANAGER_GROUP_CHAT_ID:
                try:
                    async with db.transaction():  # Wrap everything in a transaction
                        # Forward the message and store the result in the database.
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–ß–ò–©–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                        forwarded = await context.bot.send_message(
                            chat_id=MANAGER_GROUP_CHAT_ID,
                            text=f"–û—Ç @{user_username}:\n{user_message}"
                        )
                        # Only insert into DB if forwarding was successful.
                        await db.execute(
                            "INSERT INTO messages (user_chat_id, user_message_id, group_message_id) VALUES ($1, $2, $3)",
                            user_chat_id, user_message_id, forwarded.message_id
                        )

                        logger.info(
                            f"[handle_message] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username} (ID: {user_chat_id}) –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (ID: {MANAGER_GROUP_CHAT_ID}). ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {forwarded.message_id}."
                        )
                        await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

            else:
                logger.warning("[handle_message] ID –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
                await update.message.reply_text(
                    "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as e:
            logger.exception(f"An unexpected error occurred: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    db = await init_db()
    app = Application.builder().token(TOKEN).build()
    app.bot_data['db'] = db

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    await app.initialize()
    await app.start()

    try:
        PORT = int(os.environ.get("PORT", 10000))
        await app.updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{RENDER_URL}{TOKEN}",
            drop_pending_updates=True
        )

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ asyncio
        await asyncio.get_event_loop().create_future()

    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    finally:
        await app.stop()
        await app.shutdown()
        await db.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass

