import os
import logging
import asyncpg
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from urllib.parse import urlparse
import asyncio
from data import QUESTIONS, REPLIES
# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler()  # Log to the console
    ]
)
logger = logging.getLogger(__name__)

# Load manager group chat ID from environment variable
MANAGER_GROUP_CHAT_ID = int(os.getenv("MANAGER_GROUP_CHAT_ID", 0))  # Replace with your manager group ID
TEMBO_DB_URL = os.getenv("TEMBO_DATABASE_URL")
RENDER_URL = os.getenv("RENDER_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        parsed = urlparse(TEMBO_DB_URL)
        conn = await asyncpg.connect(
            user=parsed.username,
            password=parsed.password,
            database=parsed.path.lstrip('/'),
            host=parsed.hostname,
            port=parsed.port,
            ssl="require"
        )
        logger.info("Successfully connected to Tembo PostgreSQL")
    except Exception as e:
        logger.error(f"Connection error: {str(e)}")
        raise

    await conn.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            user_chat_id BIGINT NOT NULL,
            user_message_id INT NOT NULL,
            group_message_id INT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT NOW()
        )
    ''')

    await conn.execute('''
        CREATE TABLE IF NOT EXISTS replies (
            id SERIAL PRIMARY KEY,
            message_id INT REFERENCES messages(id) ON DELETE CASCADE,
            group_reply_id INT NOT NULL,
            chat_reply_id INT NOT NULL,
            content TEXT NOT NULL,
            is_deleted BOOLEAN DEFAULT FALSE,
            edited_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT NOW()
        )
    ''')
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã messages: OK")

    return conn

async def reconnect_db():
    db_conn = None
    retries = 3
    for attempt in range(1, retries + 1):
        try:
            parsed = urlparse(TEMBO_DB_URL)
            db_conn = await asyncpg.connect(
                user=parsed.username,
                password=parsed.password,
                database=parsed.path.lstrip('/'),
                host=parsed.hostname,
                port=parsed.port,
                ssl="require"
            )
            logger.info(f"Successfully reconnected to Tembo PostgreSQL (attempt {attempt}/{retries}).")
            return db_conn
        except Exception as e:
            logger.error(f"Database connection failed (attempt {attempt}/{retries}): {e}")
            await asyncio.sleep(2**attempt) # Exponential backoff
    logger.error("Failed to reconnect to the database after multiple attempts.")
    return None

# Styled "Back" button
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# Dictionary to store the relationship between user and forwarded messages
user_manager_messages = {}


# Command /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.from_user.username} started the bot.")
    # Create keyboard layout
    keyboard = [
                   [question] for question in QUESTIONS  # Each question is in its own row
               ] + [
                   ["–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì"]  # Additional button in its own row
               ]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ü©∏\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=reply_markup
    )


# Handle user messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_chat_id = update.message.chat_id
    user_message_id = update.message.message_id
    user_username = update.message.from_user.username

    # Log the received message
    logger.info(
        f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if update.message.chat.id == MANAGER_GROUP_CHAT_ID:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    if user_message == "–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º")
        logger.info(
            f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ùì")
    elif user_message in REPLIES:
        # Send the answer if the question is in the list
        await update.message.reply_text(REPLIES[user_message])
        logger.info(
            f"[handle_message] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} (ID: {user_chat_id}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {user_message}. –û—Ç–≤–µ—Ç: {REPLIES[user_message]}")
    else:
        try:
            db = context.bot_data['db']
            if db is None or db.is_closed():
                db = await reconnect_db()
                context.bot_data['db'] = db
                logger.info("Reconnection?")
                if db is None:
                    raise Exception("Failed to connect to database")
            logger.info("Connection success!")
            if MANAGER_GROUP_CHAT_ID:
                try:
                    async with db.transaction():  # Wrap everything in a transaction
                        # Forward the message and store the result in the database.
                        forwarded = await context.bot.forward_message(
                            MANAGER_GROUP_CHAT_ID,
                            user_chat_id,
                            user_message_id
                        )

                        # Only insert into DB if forwarding was successful.
                        await db.execute(
                            "INSERT INTO messages (user_chat_id, user_message_id, group_message_id) VALUES ($1, $2, $3)",
                            user_chat_id, user_message_id, forwarded.message_id
                        )

                        logger.info(
                            f"[handle_message] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username} (ID: {user_chat_id}) –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (ID: {MANAGER_GROUP_CHAT_ID}). ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {forwarded.message_id}."
                        )
                        await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

            else:
                logger.warning("[handle_message] ID –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
                await update.message.reply_text(
                    "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as e:
            logger.exception(f"An unexpected error occurred: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_manager_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug("Entering handle_manager_reply")
    try:
        if not update.message or not update.message.reply_to_message:
            logger.debug("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞")
            return

        message = update.message
        replied_msg = message.reply_to_message

        logger.debug(f"Processing reply to message {replied_msg.message_id} in chat {message.chat.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if replied_msg.from_user.id != context.bot.id:
            logger.debug("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")
            return

        group_message_id = replied_msg.message_id
        logger.debug(f"Looking up group_message_id {group_message_id} in DB")

        db = context.bot_data['db']
        if db is None or db.is_closed():
            db = await reconnect_db()
            context.bot_data['db'] = db
            logger.info("Reconnection?")
            if db is None:
                raise Exception("Failed to connect to database")

        logger.info("Connection success!")

        # –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        record = await context.bot_data['db'].fetchrow(
            "SELECT user_chat_id, user_message_id FROM messages WHERE group_message_id = $1",
            group_message_id
        )

        if not record:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent = await context.bot.send_message(
            record['user_chat_id'],
            f"üì© –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{message.text}",
            reply_to_message_id=record['user_message_id']
        )
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {record['user_chat_id']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –æ—Ç–≤–µ—Ç–æ–≤
        await context.bot_data['db'].execute(
            """INSERT INTO replies(message_id, group_reply_id, chat_reply_id, content)
            VALUES((SELECT id FROM messages WHERE group_message_id = $1), $2, $3, $4)""",
            group_message_id, message.message_id, sent.message_id, message.text
        )
        logger.debug(f"Inserted reply into DB: group_reply_id={message.message_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}", exc_info=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin_rights(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    try:
        member = await context.bot.get_chat_member(
            chat_id=chat_id,
            user_id=context.bot.id
        )
        return member.can_delete_messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False


async def delete_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(context, MANAGER_GROUP_CHAT_ID):
            await update.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message or not update.message.reply_to_message:
            logger.warning("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
            return

        replied_msg = update.message.reply_to_message
        replied_msg_id = replied_msg.message_id

        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        async with context.bot_data['db'].transaction():
            record = await context.bot_data['db'].fetchrow(
                """SELECT m.user_chat_id, r.chat_reply_id 
                FROM replies r
                JOIN messages m ON r.message_id = m.id
                WHERE r.group_reply_id = $1""",
                replied_msg_id
            )

            if not record:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {replied_msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –£–¥–∞–ª–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.delete_message(
                chat_id=record['user_chat_id'],
                message_id=record['chat_reply_id']
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await context.bot_data['db'].execute(
                "UPDATE replies SET is_deleted = TRUE WHERE group_reply_id = $1",
                replied_msg_id
            )

        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {replied_msg_id} —É–¥–∞–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        edited = update.edited_message
        if not edited or edited.chat.id != MANAGER_GROUP_CHAT_ID:
            logger.debug("Ignoring edit from non-manager group")
            return
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ edited_message
        edited = getattr(update, 'edited_message', None)
        if not edited:
            logger.debug("–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = getattr(edited, 'from_user', None)
        if not user:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ")
            return

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç @{user.username}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞
        if edited.chat.id != MANAGER_GROUP_CHAT_ID:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {edited.chat.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async with context.bot_data['db'].transaction():
            reply = await context.bot_data['db'].fetchrow(
                """SELECT r.chat_reply_id, m.user_chat_id 
                FROM replies r
                JOIN messages m ON r.message_id = m.id
                WHERE r.group_reply_id = $1""",
                edited.message_id
            )

            if not reply:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {edited.message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                return

            if reply.get('is_deleted'):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {edited.message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            await context.bot.edit_message_text(
                chat_id=reply['user_chat_id'],
                message_id=reply['chat_reply_id'],
                text=f"‚úèÔ∏è –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{edited.text}"
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            await context.bot_data['db'].execute(
                """UPDATE replies 
                SET content = $1, edited_at = NOW() 
                WHERE group_reply_id = $2""",
                edited.text, edited.message_id
            )

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {edited.message_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        if edited:
            logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {edited.to_dict()}")


async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    db = await init_db()
    app = Application.builder().token(TOKEN).build()
    app.bot_data['db'] = db

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("delete", delete_reply))
    app.add_handler(MessageHandler(
        filters.Chat(MANAGER_GROUP_CHAT_ID) &
        filters.REPLY &
        filters.UpdateType.EDITED_MESSAGE,  # üëà Only edited replies
        handle_edit
    ))
    app.add_handler(MessageHandler(
        filters.Chat(MANAGER_GROUP_CHAT_ID) &
        filters.REPLY &
        filters.UpdateType.MESSAGE,  # üëà Only new replies
        handle_manager_reply
    ))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    await app.initialize()
    await app.start()

    try:
        PORT = int(os.environ.get("PORT", 10000))
        await app.updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{RENDER_URL}{TOKEN}",
            drop_pending_updates=True
        )

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ asyncio
        await asyncio.get_event_loop().create_future()

    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    finally:
        await app.stop()
        await app.shutdown()
        await db.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass

